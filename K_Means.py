# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13UEATmEeLtLHyiMsCH7Lt5YUsGu2n2bx
"""

from skimage import io
import numpy as np
import numpy.matlib
import random
image = io.imread('Koala.jpg')


rows = image.shape[0]
cols = image.shape[1]
image = image/255
X = image.reshape(image.shape[0]*image.shape[1],3)
K = 20 #number of clusters
max_iters = 50 #number of times the k-mean should run

import random

def init_centroids(X,K):

  m, n = X.shape
  centroids = np.zeros((K, n))
    
  for i in range(K):
    centroids[i] = X[np.random.randint(0, m+1), :]

  return centroids


initial_centroids = init_centroids(X,K)

def run_kMean(X,initial_centroids,max_iters):
    centroids = initial_centroids

    for i in range(1,max_iters):
        idx = closest_centroids(X,centroids)
        centroids = compute_centroids(X,idx,centroids)
    return centroids,idx


def closest_centroids(X,centroids):
  distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=2))
  return np.argmin(distances, axis=0)

def compute_centroids(X,idx,centroids):
  
  return np.array([X[idx==k].mean(axis=0) for k in range(centroids.shape[0])])


centroids, idx = run_kMean(X, initial_centroids, max_iters)
#idx.resize((np.size(X,0),1))

idx = closest_centroids(X,centroids)
X_recovered = centroids[idx]
print(np.shape(X_recovered))
X_recovered = np.reshape(X_recovered, (rows, cols, 3))
print(np.shape(X_recovered))

from skimage import io
io.imsave('Koala_K_20_small.jpg', X_recovered)

import os
info = os.stat('Koala.jpg')
print("size of image before running K-mean algorithm: ",info.st_size/1024,"KB")
info_small = os.stat('Koala_K_20_small.jpg')
print("size of image after running K-mean algorithm: ",info_small.st_size/1024,"KB")
print((info.st_size/1024)/(info_small.st_size/1024))

